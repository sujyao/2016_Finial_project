
rf_rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800060  00800060  000002b6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e2  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000272  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024b  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d8  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e4  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b5  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001061  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 3a       	cpi	r26, 0xA2	; 162
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	20 93 61 00 	sts	0x0061, r18
  82:	20 93 60 00 	sts	0x0060, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
  86:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
  88:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<RXEN);
  8e:	80 e9       	ldi	r24, 0x90	; 144
  90:	8a b9       	out	0x0a, r24	; 10
	sei();
  92:	78 94       	sei
  94:	08 95       	ret

00000096 <__vector_11>:

}

//The USART ISR
ISR(USART_RXC_VECT)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
	//Read the data
	char data=UDR;
  ae:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  b0:	80 91 61 00 	lds	r24, 0x0061
  b4:	8f 33       	cpi	r24, 0x3F	; 63
  b6:	89 f1       	breq	.+98     	; 0x11a <__vector_11+0x84>
  b8:	80 91 61 00 	lds	r24, 0x0061
  bc:	20 91 60 00 	lds	r18, 0x0060
  c0:	99 27       	eor	r25, r25
  c2:	87 fd       	sbrc	r24, 7
  c4:	90 95       	com	r25
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	33 27       	eor	r19, r19
  ca:	27 fd       	sbrc	r18, 7
  cc:	30 95       	com	r19
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	39 f1       	breq	.+78     	; 0x122 <__vector_11+0x8c>
		UQFront++;
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
  d4:	80 91 61 00 	lds	r24, 0x0061
  d8:	8f 33       	cpi	r24, 0x3F	; 63
  da:	91 f1       	breq	.+100    	; 0x140 <__vector_11+0xaa>
		UQEnd=0;
	else
		UQEnd++;
  dc:	80 91 61 00 	lds	r24, 0x0061
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 61 00 	sts	0x0061, r24


	URBuff[UQEnd]=data;
  e6:	e0 91 61 00 	lds	r30, 0x0061
  ea:	ff 27       	eor	r31, r31
  ec:	e7 fd       	sbrc	r30, 7
  ee:	f0 95       	com	r31
  f0:	ee 59       	subi	r30, 0x9E	; 158
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
  f6:	80 91 60 00 	lds	r24, 0x0060
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	11 f4       	brne	.+4      	; 0x102 <__vector_11+0x6c>
  fe:	10 92 60 00 	sts	0x0060, r1

}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti
	//Read the data
	char data=UDR;

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 11a:	80 91 60 00 	lds	r24, 0x0060
 11e:	81 11       	cpse	r24, r1
 120:	cb cf       	rjmp	.-106    	; 0xb8 <__vector_11+0x22>
	{
		//Q Full
		UQFront++;
 122:	80 91 60 00 	lds	r24, 0x0060
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 12c:	80 91 60 00 	lds	r24, 0x0060
 130:	80 34       	cpi	r24, 0x40	; 64
 132:	81 f6       	brne	.-96     	; 0xd4 <__vector_11+0x3e>
 134:	10 92 60 00 	sts	0x0060, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 138:	80 91 61 00 	lds	r24, 0x0061
 13c:	8f 33       	cpi	r24, 0x3F	; 63
 13e:	71 f6       	brne	.-100    	; 0xdc <__vector_11+0x46>
		UQEnd=0;
 140:	10 92 61 00 	sts	0x0061, r1
 144:	d0 cf       	rjmp	.-96     	; 0xe6 <__vector_11+0x50>

00000146 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 146:	80 91 60 00 	lds	r24, 0x0060
 14a:	8f 3f       	cpi	r24, 0xFF	; 255
 14c:	09 f1       	breq	.+66     	; 0x190 <UReadData+0x4a>
		return 0;
	
	data=URBuff[UQFront];
 14e:	e0 91 60 00 	lds	r30, 0x0060
 152:	ff 27       	eor	r31, r31
 154:	e7 fd       	sbrc	r30, 7
 156:	f0 95       	com	r31
 158:	ee 59       	subi	r30, 0x9E	; 158
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
	
	if(UQFront==UQEnd)
 15e:	20 91 60 00 	lds	r18, 0x0060
 162:	90 91 61 00 	lds	r25, 0x0061
 166:	29 17       	cp	r18, r25
 168:	51 f0       	breq	.+20     	; 0x17e <UReadData+0x38>
	//So empty q
	UQFront=UQEnd=-1;
	}
	else
	{
		UQFront++;
 16a:	90 91 60 00 	lds	r25, 0x0060
 16e:	9f 5f       	subi	r25, 0xFF	; 255
 170:	90 93 60 00 	sts	0x0060, r25

		if(UQFront==RECEIVE_BUFF_SIZE)
 174:	90 91 60 00 	lds	r25, 0x0060
 178:	90 34       	cpi	r25, 0x40	; 64
 17a:	39 f0       	breq	.+14     	; 0x18a <UReadData+0x44>
		UQFront=0;
	}

	return data;
}
 17c:	08 95       	ret
	
	if(UQFront==UQEnd)
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 17e:	9f ef       	ldi	r25, 0xFF	; 255
 180:	90 93 61 00 	sts	0x0061, r25
 184:	90 93 60 00 	sts	0x0060, r25
 188:	08 95       	ret
	else
	{
		UQFront++;

		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
 18a:	10 92 60 00 	sts	0x0060, r1
 18e:	08 95       	ret
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
		return 0;
 190:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 192:	08 95       	ret

00000194 <UDataAvailable>:
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 194:	80 91 60 00 	lds	r24, 0x0060
 198:	8f 3f       	cpi	r24, 0xFF	; 255
 19a:	d1 f0       	breq	.+52     	; 0x1d0 <UDataAvailable+0x3c>
	if(UQFront<UQEnd)
 19c:	90 91 60 00 	lds	r25, 0x0060
 1a0:	80 91 61 00 	lds	r24, 0x0061
 1a4:	98 17       	cp	r25, r24
 1a6:	6c f0       	brlt	.+26     	; 0x1c2 <UDataAvailable+0x2e>
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
 1a8:	90 91 60 00 	lds	r25, 0x0060
 1ac:	80 91 61 00 	lds	r24, 0x0061
 1b0:	89 17       	cp	r24, r25
 1b2:	84 f4       	brge	.+32     	; 0x1d4 <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 1b4:	80 91 61 00 	lds	r24, 0x0061
 1b8:	90 91 60 00 	lds	r25, 0x0060
 1bc:	8f 5b       	subi	r24, 0xBF	; 191
 1be:	89 1b       	sub	r24, r25
 1c0:	08 95       	ret

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
 1c2:	80 91 61 00 	lds	r24, 0x0061
 1c6:	90 91 60 00 	lds	r25, 0x0060
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	89 1b       	sub	r24, r25
 1ce:	08 95       	ret
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
}
 1d6:	08 95       	ret

000001d8 <main>:

#include <avr/io.h>
#include "lib/usart/usart_avr.h"

int main()
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x6>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <main+0x8>
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62

	uint8_t i; //Classical loop variable
	
	uint8_t packet[5],data=0;
	
	DDRC|=0xFF;	//All Output
 1e6:	84 b3       	in	r24, 0x14	; 20
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	84 bb       	out	0x14, r24	; 20

	//Initialize the USART with Baud rate = 2400bps
	USARTInit(416);
 1ec:	80 ea       	ldi	r24, 0xA0	; 160
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 3e 00 	call	0x7c	; 0x7c <USARTInit>
	*/

	while(1)
	{
		//Wait for a packet
		while(!UDataAvailable());
 1f4:	0e 94 ca 00 	call	0x194	; 0x194 <UDataAvailable>
 1f8:	88 23       	and	r24, r24
 1fa:	e1 f3       	breq	.-8      	; 0x1f4 <main+0x1c>
		if(UReadData()!='A') continue;
 1fc:	0e 94 a3 00 	call	0x146	; 0x146 <UReadData>
 200:	81 34       	cpi	r24, 0x41	; 65
 202:	c1 f7       	brne	.-16     	; 0x1f4 <main+0x1c>
		while(!UDataAvailable());
 204:	0e 94 ca 00 	call	0x194	; 0x194 <UDataAvailable>
 208:	88 23       	and	r24, r24
 20a:	e1 f3       	breq	.-8      	; 0x204 <main+0x2c>
		if(UReadData()!='A') continue;
 20c:	0e 94 a3 00 	call	0x146	; 0x146 <UReadData>
 210:	81 34       	cpi	r24, 0x41	; 65
 212:	81 f7       	brne	.-32     	; 0x1f4 <main+0x1c>
		
		while(UDataAvailable()!=3);
 214:	0e 94 ca 00 	call	0x194	; 0x194 <UDataAvailable>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x3c>

		//Get the packet
		for(i=2;i<5;i++)
		{
			packet[i]=UReadData();
 21c:	0e 94 a3 00 	call	0x146	; 0x146 <UReadData>
 220:	8b 83       	std	Y+3, r24	; 0x03
 222:	0e 94 a3 00 	call	0x146	; 0x146 <UReadData>
 226:	8c 83       	std	Y+4, r24	; 0x04
 228:	0e 94 a3 00 	call	0x146	; 0x146 <UReadData>
		}

		//Is it ok?
		if(packet[2]!=((uint8_t)~packet[3])) continue;
 22c:	2b 81       	ldd	r18, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	90 95       	com	r25
 232:	29 13       	cpse	r18, r25
 234:	df cf       	rjmp	.-66     	; 0x1f4 <main+0x1c>

		if(packet[4]!='Z') continue;
 236:	8a 35       	cpi	r24, 0x5A	; 90
 238:	e9 f6       	brne	.-70     	; 0x1f4 <main+0x1c>

		//The packet is ok
		data=packet[2];

		//Now we have data put it to PORTC
		PORTC=data;
 23a:	25 bb       	out	0x15, r18	; 21
 23c:	db cf       	rjmp	.-74     	; 0x1f4 <main+0x1c>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
